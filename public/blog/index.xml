<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ante</title>
    <link>https://antelang.org/blog/</link>
    <description>Recent content in Blogs on Ante</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://antelang.org/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Algebraic Effects?</title>
      <link>https://antelang.org/blog/why_effects/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      
      <guid>https://antelang.org/blog/why_effects/</guid>
      <description>Why Algebraic Effects Algebraic effects1 (a.k.a. effect handlers) are a very useful up-and-coming feature that I personally think will see a huge surge in popularity in the programming languages of tomorrow. They&amp;rsquo;re one of the core features of Ante, as well as being the focus of many research languages including Koka, Effekt, Eff, and Flix. However, while many articles or documentation snippets try to explain what effect handlers are (including Ante&amp;rsquo;s own documentation), I think few really take the time to focus on why you would want to use them.</description>
    </item>
    
    <item>
      <title>Simplification Through Addition</title>
      <link>https://antelang.org/blog/simplification_through_addition/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://antelang.org/blog/simplification_through_addition/</guid>
      <description>Ante&amp;rsquo;s goal was always to be a slightly higher level language than Rust. I always imagined Ante to fill this gap in language design between higher-level garbage collected languages like Java, Python, and Haskell, and lower level non-garbage collected languages like C, C++, and Rust. I still think there&amp;rsquo;s room there for a language which tries to manage things by default but also allows users to manually do so if needed as an optimization.</description>
    </item>
    
    <item>
      <title>Algebraic Effects, Ownership, and Borrowing</title>
      <link>https://antelang.org/blog/effects_ownership_and_borrowing/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://antelang.org/blog/effects_ownership_and_borrowing/</guid>
      <description>Introduction Algebraic Effects are a useful abstraction for reasoning about effectful programs by letting us leave the interpretation of these effects to callers. However, most existing literature discusses these in the context of a pure functional language with pervasive sharing of values. What restrictions would we need to introduce algebraic effects into a language with ownership and borrowing - particularly Ante?1
 Ownership Consider the following program:
effect Read a with read : Unit -&amp;gt; a the_value (value: a) (f: Unit -&amp;gt; b can Read a) : b = handle f () | read () -&amp;gt; resume value This seems like it&amp;rsquo;d pass type checking at first glance, but we can easily construct a program that tries to use the same moved value twice:</description>
    </item>
    
    <item>
      <title>Achieving Safe, Aliasable Mutability with Unboxed Types</title>
      <link>https://antelang.org/blog/safe_shared_mutability/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://antelang.org/blog/safe_shared_mutability/</guid>
      <description>This is part of Ante&amp;rsquo;s goal to loosen restrictions on low-level programming while remaining fast, memory-safe, and thread-safe.
 Background  When writing low-level, memory-safe, and thread-safe programs, a nice feature that lets us achieve all of these is an ownership model. Ownership models have been used by quite a few languages, but the language which popularized them was Rust. In Rust, the compiler will check our code to ensure we have no dangling references and cannot access already-freed memory (among other errors).</description>
    </item>
    
  </channel>
</rss>
